diff --git a/openbox/client.h b/openbox/client.h
index 11a01400..a69c25ec 100644
--- a/openbox/client.h
+++ b/openbox/client.h
@@ -268,6 +268,10 @@ struct _ObClient
     gboolean max_vert;
     /*! The window is maximized to fill the screen horizontally */
     gboolean max_horz;
+    /*! The window is snapped to fill the left side of the screen */
+    gboolean snapped_left;
+    /*! The window is snapped to fill the right side of the screen */
+    gboolean snapped_right;
     /*! The window should not be displayed by pagers */
     gboolean skip_pager;
     /*! The window should not be displayed by taskbars */
diff --git a/openbox/moveresize.c b/openbox/moveresize.c
index d12a64de..601ef4ab 100644
--- a/openbox/moveresize.c
+++ b/openbox/moveresize.c
@@ -372,7 +372,7 @@ void moveresize_end(gboolean cancel)
 
 static void do_move(gboolean keyboard, gint keydist)
 {
-    gint resist;
+    gint resist, x, y;
 
     if (keyboard) resist = keydist - 1; /* resist for one key press */
     else resist = config_resist_win;
@@ -380,6 +380,164 @@ static void do_move(gboolean keyboard, gint keydist)
     if (!keyboard) resist = config_resist_edge;
     resist_move_monitors(moveresize_client, resist, &cur_x, &cur_y);
 
+    screen_pointer_pos(&x, &y);
+
+    /* Window areo snapping with support for dual monitors */
+
+    int nm = screen_num_monitors; //get number of monitors
+
+    gint t1, t2;
+    gint w1, w2;
+    int top_snap, top_snap_release, left_snap, right_snap, left_snap_release, right_snap_release;
+    int pw = 5; // number of pixels to trigger snapping
+
+    if (nm==1)
+    {
+        const Rect *a = screen_physical_area_active();
+        t1 = RECT_TOP(*a);
+        w1 = RECT_RIGHT(*a) - RECT_LEFT(*a);
+
+        top_snap = (y == t1); // test if in range to snap top
+        top_snap_release = (y > t1); // test if in range to release snap top
+
+        left_snap  = x >= 0 && x < pw; // test if in range to snap left
+        right_snap = x > w1 - pw && x <= w1; // test if in range to snap right
+
+        left_snap_release  = x > pw && x < w1; // test if in range to release snap left
+        right_snap_release = x > 0 && x < w1-pw; // test if in range to release snap right
+    }
+    else if (nm==2)
+    {
+        const Rect *a1 = screen_physical_area_monitor(1);
+        const Rect *a2 = screen_physical_area_monitor(2);
+        t1 = RECT_TOP(*a1);
+        t2 = RECT_TOP(*a2);
+        w1 = RECT_RIGHT(*a1) - RECT_LEFT(*a1);
+        w2 = RECT_RIGHT(*a2) - RECT_LEFT(*a2) - w1 - 1;
+
+        if (x < w1) {
+            top_snap = (y == t1); // test if in range to snap top
+            top_snap_release = (y > t1); // test if in range to release snap top
+        }
+        else {
+            top_snap = (y == t2); // test if in range to snap top
+            top_snap_release = (y > t2); // test if in range to release snap top
+        }
+
+        left_snap  = (x >= 0 && x < pw) || (x >= w1+1 && x < w1+1+pw); // test if in range to snap left
+        right_snap = (x > w1 - pw && x <= w1) || (x > (w1+w2)+1-pw && x <= (w1+w2)+1); // test if in range to snap right
+
+        left_snap_release  = (x > pw && x < w1) || (x>pw+w1 && x<2*w1); // test if in range to release snap left
+        right_snap_release = (x>w1 && x < (w1+w2)-pw) || (x>0 && x<w1-pw); // test if in range to release snap right
+    }
+
+    if (moveresize_client->max_horz && moveresize_client->max_vert && top_snap_release)
+    {
+        client_maximize(moveresize_client, FALSE, 0);
+        start_cx = 0;
+        start_cy = 0;
+        start_x = ((x - cur_x) * moveresize_client->area.width) / cur_w;
+        start_y = y - t1;
+        if (nm==2 && x > w1) start_y = y - t2;
+        cur_x = x - start_x;
+        cur_y = y - start_y;
+        cur_w = moveresize_client->area.width;
+        cur_h = moveresize_client->area.height;
+    }
+    else if (top_snap && !moveresize_client->snapped_left && !moveresize_client->snapped_right) {
+        moveresize_client->pre_max_area.width = cur_w;
+        moveresize_client->pre_max_area.height = cur_h;
+        client_maximize(moveresize_client, TRUE, 0);
+    }
+    else if (left_snap && !moveresize_client->snapped_left && !moveresize_client->max_horz && !moveresize_client->max_vert) {
+        moveresize_client->pre_max_area.x = cur_x;
+        moveresize_client->pre_max_area.y = cur_y;
+        moveresize_client->pre_max_area.width = cur_w;
+        moveresize_client->pre_max_area.height = cur_h;
+        client_maximize(moveresize_client, TRUE, 2);
+        moveresize_client->snapped_left = TRUE;
+    }
+    else if (left_snap_release && moveresize_client->snapped_left && !moveresize_client->max_horz) {
+        start_cx = x - moveresize_client->pre_max_area.width / 2;
+        start_cy = y;
+        start_x = x;
+        start_y = y;
+        cur_x = start_cx;
+        cur_y = start_cy;
+        cur_w = moveresize_client->pre_max_area.width;
+        cur_h = moveresize_client->pre_max_area.height;
+        client_maximize(moveresize_client, FALSE, 2);
+        moveresize_client->snapped_left = FALSE;
+    }
+    else if (right_snap  && !moveresize_client->snapped_right && !moveresize_client->max_horz && !moveresize_client->max_vert) {
+        moveresize_client->pre_max_area.x = cur_x;
+        moveresize_client->pre_max_area.y = cur_y;
+        moveresize_client->pre_max_area.width = cur_w;
+        moveresize_client->pre_max_area.height = cur_h;
+        client_maximize(moveresize_client, TRUE, 2);
+        moveresize_client->snapped_right = TRUE;
+    }
+    else if (right_snap_release  && moveresize_client->snapped_right && !moveresize_client->max_horz) {
+        start_cx = x - moveresize_client->pre_max_area.width / 2;
+        start_cy = y;
+        start_x = x;
+        start_y = y;
+        cur_x = start_cx;
+        cur_y = start_cy;
+        cur_w = moveresize_client->pre_max_area.width;
+        cur_h = moveresize_client->pre_max_area.height;
+        client_maximize(moveresize_client, FALSE, 2);
+        moveresize_client->snapped_right = FALSE;
+    }
+    else if (!moveresize_client->snapped_right && !moveresize_client->snapped_left && moveresize_client->max_vert && !moveresize_client->max_horz) {
+        cur_h = moveresize_client->pre_max_area.height;
+        cur_w = moveresize_client->pre_max_area.width;
+        if (cur_w == 0){
+            if (x < w1) cur_w = w1/2;
+            else cur_w = w2/2;
+        }
+        client_maximize(moveresize_client, FALSE, 2);
+    }
+
+    if (nm==1){
+        if (moveresize_client->snapped_left) {
+            cur_x = 0;
+            cur_y = 0;
+            cur_w = (w1 / 2) - 1;
+        }
+        else if (moveresize_client->snapped_right) {
+            cur_x = w1 / 2;
+            cur_y = 0;
+            cur_w = w1 / 2;
+        }
+    }
+    else if (nm==2){
+        if (moveresize_client->snapped_left) {
+            if (x < w1){
+                cur_x = 0;
+                cur_y = 0;
+                cur_w = (w1 / 2) - 1;
+            }
+            else {
+                cur_x = w1+1;
+                cur_y = 0;
+                cur_w = (w2 / 2) - 1;
+            }
+        }
+        else if (moveresize_client->snapped_right) {
+            if (x < w1){
+                cur_x = w1 / 2;
+                cur_y = 0;
+                cur_w = w1 / 2;
+            }
+            else {
+                cur_x = w1+1 + w2/2;
+                cur_y = 0;
+                cur_w = w2 / 2;
+            }
+        }
+    }
+
     client_configure(moveresize_client, cur_x, cur_y, cur_w, cur_h,
                      TRUE, FALSE, FALSE);
     if (config_resize_popup_show == 2) /* == "Always" */
